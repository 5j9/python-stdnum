# cedula.py - functions for handling Dominican Republic national identifier
#
# Copyright (C) 2015 Arthur de Jong
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA

"""Cedula (Dominican Republic national identification number).

A cedula is is an 11-digit number issues by the Dominican Republic government
to citizens or residents for identification purposes.

>>> validate('00113918205')
'00113918205'
>>> validate('00113918204')
Traceback (most recent call last):
    ...
InvalidChecksum: ...
>>> validate('0011391820A')
Traceback (most recent call last):
    ...
InvalidFormat: ...
>>> format('22400022111')
'224-0002211-1'
"""

from stdnum.exceptions import *
from stdnum.util import clean
from stdnum import luhn


# list of Cedulas that do not match the checksum but are nonetheless valid
whitelist = set([
    '00000021249', '00000035692', '00000058035', '00000065377',
    '00000078587', '00000111941', '00000126295', '00000140874',
    '00000155482', '00000236621', '00000292212', '00000564933',
    '00000719400', '00004110056', '00100000169', '00100016495',
    '00100053841', '00100061945', '00100083860', '00100126468',
    '00100172940', '00100174666', '00100181057', '00100238382',
    '00100239662', '00100255349', '00100288929', '00100322649',
    '00100350928', '00100378440', '00100384523', '00100415853',
    '00100523399', '00100524531', '00100530588', '00100593378',
    '00100622461', '00100709215', '00100728113', '00100729795',
    '00100756082', '00100759932', '00101118022', '00101527366',
    '00101621981', '00101659661', '00101821735', '00101961125',
    '00102025201', '00102577448', '00102630192', '00103266558',
    '00103443802', '00103754365', '00103983004', '00104486903',
    '00104662561', '00104785104', '00104862525', '00105328185',
    '00105606543', '00107045499', '00108497822', '00108796883',
    '00109402756', '00109785951', '00110047715', '00110071113',
    '00114272360', '00114532330', '00116256005', '00117582001',
    '00119161853', '00121581750', '00121581800', '00129737056',
    '00130610001', '00131257003', '00134588056', '00142864013',
    '00143072001', '00144435001', '00146965001', '00147485003',
    '00155144906', '00161884001', '00162906003', '00163540003',
    '00163549012', '00163709018', '00166533003', '00167311001',
    '00170009162', '00170115579', '00171404771', '00174729003',
    '00174940001', '00181880003', '00184129003', '00189213001',
    '00189405093', '00190002567', '00196714003', '00200021994',
    '00200028716', '00200040516', '00200063601', '00200123640',
    '00200409772', '00201023001', '00207327056', '00208430205',
    '00208832003', '00218507031', '00222017001', '00235482001',
    '00236245013', '00241997013', '00246160013', '00261011013',
    '00270764013', '00274652001', '00278005023', '00289931003',
    '00291431001', '00291549003', '00297018001', '00298109001',
    '00299724003', '00300001538', '00300011700', '00300013835',
    '00300017875', '00300019575', '00300020806', '00300025568',
    '00300169535', '00300244009', '00300636564', '00301200901',
    '00305535206', '00345425001', '00352861001', '00356533003',
    '00362684023', '00376023023', '00400001552', '00400012957',
    '00425759001', '00435518003', '00475916056', '00481106001',
    '00481595003', '00493593003', '00516077003', '00520207699',
    '00524571001', '00539342005', '00540077717', '00544657001',
    '00574599001', '00599408003', '00633126023', '00644236001',
    '00648496171', '00651322001', '00686904003', '00720758056',
    '00731054054', '00741721056', '00757398001', '00800106971',
    '00848583056', '00857630012', '00971815056', '01000005580',
    '01000268998', '01038813907', '01094560111', '01100014261',
    '01100620962', '01154421047', '01200004166', '01200008613',
    '01200011252', '01200014133', '01200033420', '01300001142',
    '01300005424', '01300020331', '01400000282', '01400074875',
    '01600009531', '01600026316', '01650257001', '01810035037',
    '02038569001', '02300023225', '02300031758', '02300037618',
    '02300047220', '02300052220', '02300054193', '02300062066',
    '02300085158', '02600036132', '02600094954', '02700029905',
    '02755972001', '02800000129', '02800021761', '02800025877',
    '02800029588', '02831146001', '03000411295', '03100109611',
    '03100673050', '03102828522', '03102936385', '03103749672',
    '03111670001', '03121982479', '03200066940', '03400157849',
    '03600127038', '03800032522', '03807240010', '03852380001',
    '03900069856', '03900192284', '04400002002', '04600198229',
    '04700004024', '04700020933', '04700027064', '04700061076',
    '04700070460', '04700074827', '04800019561', '04800046910',
    '04801245892', '04900011690', '04900026260', '04900028443',
    '04902549001', '04941042001', '05300013029', '05400016031',
    '05400021759', '05400022042', '05400028496', '05400033166',
    '05400034790', '05400037495', '05400038776', '05400040523',
    '05400047674', '05400048248', '05400049237', '05400049834',
    '05400053627', '05400054156', '05400055485', '05400055770',
    '05400057300', '05400058964', '05400059956', '05400060743',
    '05400062459', '05400067703', '05400072273', '05400076481',
    '05500003079', '05500006796', '05500008806', '05500012039',
    '05500014375', '05500017761', '05500021118', '05500022399',
    '05500023407', '05500024135', '05500024190', '05500027749',
    '05500032681', '05600037761', '05600038251', '05600038964',
    '05600051191', '05600063115', '05600267737', '05700071202',
    '05900072869', '06100007818', '06100009131', '06100011935',
    '06100013662', '06100016486', '06337850001', '06400007916',
    '06400011981', '06400014372', '06486186001', '06800008448',
    '06843739551', '07600000691', '07700009346', '07800000968',
    '08016809001', '08498619001', '08800003986', '08900001310',
    '08900005064', '08952698001', '09300006239', '09421581768',
    '09700003030', '10061805811', '10462157001', '10491297001',
    '10621581792', '10983439110', '11700000658', '12019831001',
    '22321581834', '22721581818', '40200401324', '40200452735',
    '40200639953', '40200700675', '90001200901'])


def compact(number):
    """Convert the number to the minimal representation. This strips the
    number of any valid separators and removes surrounding whitespace."""
    return clean(number, ' -').strip()


def validate(number):
    """Checks to see if the number provided is a valid cedula."""
    number = compact(number)
    if len(number) != 11:
        raise InvalidLength()
    if not number.isdigit():
        raise InvalidFormat()
    if number in whitelist:
        return number
    return luhn.validate(number)


def is_valid(number):
    """Checks to see if the number provided is a valid cedula."""
    try:
        return bool(validate(number))
    except ValidationError:
        return False


def format(number):
    """Reformat the passed number to the standard format."""
    number = compact(number)
    return '-'.join((number[:3], number[3:-1], number[-1]))
